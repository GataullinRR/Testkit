@using global::SharedT.Types;
@inject IPresentationService PresentationService;
@inject IWebMessageHub Hub;

<TableBase Columns="_columns" Rows="_rows" RowsPerItem="2" TotalCount="_totalCount" OnAddRequestedAsync="addMoreAsync" EmptyMessage="_emptyMessage" />

@code {
    readonly TableBase.Column[] _columns = new TableBase.Column[]
    {
        new TableBase.Column() { Name = "Outcome" },
        new TableBase.Column() { Name = "Duration" },
        new TableBase.Column() { Name = "Test name" },
        new TableBase.Column() { Name = "Run date" },
        new TableBase.Column() { Name = "Started by" },
    };
    List<TableBase.Row> _rows = new List<TableBase.Row>();
    int _totalCount = 0;
    int _testsToShow = 0;
    RenderFragment _emptyMessage = @<span>There are nothing to show yet :/ Run test to see the results</span>;

    [Parameter]
    public string TestNameFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Hub.TestCompletedAsync += async m =>
        {
            if (m.TestName.StartsWith(TestNameFilter))
            {
                await rerenderAsync();
            }
        };
        Hub.TestDeletedAsync += m => rerenderAsync();
        Hub.TestBegunAsync += m => rerenderAsync();

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await rerenderAsync();

        await base.OnParametersSetAsync();
    }

    async Task rerenderAsync()
    {
        await addMoreAsync(0);

        StateHasChanged();
    }

    async Task addMoreAsync(int count)
    {
        _testsToShow = _rows.Count + count;
        var response = await PresentationService.GetTestDetailsAsync(new GetTestDetailsRequest(TestNameFilter.ToSequence().ToArray(), _testsToShow));

        _totalCount = response.TotalCount;
        _rows.Clear();

        foreach (var result in response.RunResulsts)
        {
            _rows.Add(new TableBase.Row()
            {
                Cells = new RenderFragment[]
                {
                    @<span>@result.Result</span>,
                    @<span>@result.Duration.TotalSeconds.ToString("F1") secouns</span>,
                    @<TestReferenceButton TestName="@result.TestName" />,
                    @<span>@result.StartTime.ToString("hh:mm dd.MM.yyy")</span>,
                    @<UserProfileButton UserName="@result.StartedByUser" />
                }
            });

            IEnumerable<global::SharedT.Types.Difference> differences = null;
            if (result.ActualParameters != null && result.ExpectedParameters != null)
            {
                var actual = NodeParameter.TryDeserialize(result.ActualParameters);
                var expected = NodeParameter.TryDeserialize(result.ExpectedParameters);
                differences = expected.CompareWith(actual);
            }

            _rows.Add(new TableBase.Row()
            {
                IsFullRowWide = true,
                Cells = new RenderFragment[]
                {
                    @<Expander Name="Log">
                        <div><ParametersDifferenceView Differences="@differences" /></div>
                        <div><ParametersView Parameters="@NodeParameter.TryDeserialize(result.ActualParameters)" Name="Actual parameters" /></div>
                        <div><ParametersView Parameters="@NodeParameter.TryDeserialize(result.ExpectedParameters)" Name="Expected parameters" /></div>
                    </Expander>
                }
            });
        }
    }
}
