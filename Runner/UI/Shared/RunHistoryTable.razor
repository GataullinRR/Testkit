@inject PresentationService.API2.PresentationService.PresentationServiceClient PresentationService;

@if (_rows.Count == 0)
{
    <RootContainer>
        <span>The is nothing to show yet :/ Run test to see the results</span>
    </RootContainer>
}
else
{
    <TableBase Columns="_columns" Rows="_rows" TotalCount="_totalCount" OnAddRequestedAsync="addMoreAsync" />
}
@code {
        readonly TableBase.Column[] _columns = new TableBase.Column[]
        {
        new TableBase.Column() { Name = "Outcome" },
        new TableBase.Column() { Name = "Duration" },
        new TableBase.Column() { Name = "Test Id" },
        new TableBase.Column() { Name = "Date" },
        new TableBase.Column() { Name = "Started by" },
                };
        List<TableBase.Row> _rows = new List<TableBase.Row>();
        int _totalCount = 0;

        [Parameter]
        public string TestId { get; set; }

protected override async Task OnParametersSetAsync()
    {
        _rows.Clear();

        await addMoreAsync(10);

        base.OnParametersSet();
    }

    async Task addMoreAsync(int count)
    {
        var newCount = _rows.Count + count;
        GetTestDetailsResponse response = await PresentationService.GetTestDetailsAsync(new GetTestDetailsRequest(TestId.ToSequence().ToArray(), newCount));

        _totalCount = response.TotalCount;
        _rows.Clear();

        foreach (var result in response.RunResulsts.Reverse())
        {
            _rows.Add(new TableBase.Row()
            {
                Cells = new RenderFragment[]
                {
@<span>@result.Result</span>,
@<span>@result.Duration.TotalSeconds.ToString("F1") secouns</span>,
@<TestReferenceButton TestId="@result.TestId" />,
@<span>@result.StartTime.ToString("hh:mm dd.MM.yyy")</span>,
@<UserProfileButton UserName="@result.StartedByUser" />
                    }
                });
            }
        }
    }
