@inject IPresentationService PresentationService;
@inject NavigationManager Navigation
@inject IMessageService MessageService
@inject IIdentityContext Identity
@inject Browser Browser;

@if (Identity.Identity.IsAuthentificated)
{
    <InlineButton class="text-danger" @onclick="() => goToAsync()">Delete</InlineButton>
}

@code {
    [Parameter]
    public IEnumerable<IFilterOrder> Filters { get; set; }

    async Task goToAsync()
    {
        try
        {
            if (Filters.Any(f => !(f is ByTestIdsFilter) || (f as ByTestIdsFilter)?.TestIds?.Length > 1))
            {
                if (await Browser.ConfirmAsync($"Are you sure? You won't be able to restore deleted tests (yet)!"))
                {
                    await PresentationService.DeleteTestAsync(new DeleteTestRequest(Filters.ToArray()));

                    Navigation.NavigateTo(Pages.Index.URI);
                }
            }
            else
            {
                await PresentationService.DeleteTestAsync(new DeleteTestRequest(Filters.ToArray()));

                Navigation.NavigateTo(Pages.Index.URI);
            }
        }
        catch
        {
            MessageService.AddMessage("Could not delete the test. Do you have peremissions?");
        }
    }
}