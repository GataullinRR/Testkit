@using global::SharedT.Types;

@if (Parameters == null)
{
    <span>There are no parameters</span>
}
else
{
    <Expander Name="@Name" IsFirstLevel="IsFirstLevel" ContentProvider="_contProvider" />
}

@code {
    [Parameter]
    public NodeParameter Parameters { get; set; }

    [Parameter]
    public string Name { get; set; } = "Parameters";

    [Parameter]
    public bool IsFirstLevel { get; set; } = true;

    Func<RenderFragment> _contProvider = () => @<span></span>;

    protected override void OnParametersSet()
    {
        if (Parameters != null)
        {
            var lines = renderParametersView(Parameters).ToArray();
            _contProvider = () => @<Content Lines="lines"/>;
        }

        base.OnParametersSet();
    }

    IEnumerable<RenderFragment> renderParametersView(ParameterBase parameter, int depth = 0)
    {
        var perfix = "       ".Repeat(depth);
        if (parameter is LeafParameter leaf)
        {
            var value = leaf.Value == null
                ? "null"
                : $"\"{leaf.Value}\"";
            var text = $"{perfix}{leaf.Name} = {value}";
            yield return @<div><span>@text</span></div>;
        }
        else if (parameter is NodeParameter node)
        {
            yield return @<div><strong><span>@($"{perfix}{node.Name}")</span></strong></div>;
            foreach (var child in node.Children)
            {
                foreach (var fragment in renderParametersView(child, depth + 1))
                {
                    yield return fragment;
                }
            }
        }
        else
        {
            yield return @<span>UNKNOWN PARAMETER TYPE</span>;
        }
    }
}
