@if (_lines == null)
{
    <span>The test has no parameters</span>
}
else
{
    <div>
        <h4 class="d-block" @onclick="() => onParametersExpanderClickAsync()">Test parameters (click to collapse/expand)</h4>
        <div class="px-2 @_parametersContainerClass">
            @foreach (var fragment in _lines)
            {
                @fragment;
            }
        </div>
    </div>
}

@code {
    async Task onParametersExpanderClickAsync()
    {
        _parametersContainerClass = _parametersContainerClass == "d-none"
            ? ""
            : "d-none";
    }

    string _parametersContainerClass = "d-none";

    [Parameter]
    public string Parameters { get; set; }

    RenderFragment[] _lines;

    protected override void OnParametersSet()
    {
        _lines = null;
        if (Parameters != null)
        {
            var doc = new System.Xml.XmlDocument();
            doc.LoadXml(Parameters);
            var node = doc.ChildNodes[0];

            _lines = renderParametersView(node).ToArray();
        }

        base.OnParametersSet();
    }

    IEnumerable<RenderFragment> renderParametersView(System.Xml.XmlNode node, int depth = 0)
    {
        var name = node?.Attributes?["name"]?.Value ?? node.Name;
        var hasTextNode = node.HasChildNodes
            && node.ChildNodes.Count == 1
            && node.ChildNodes[0].NodeType == System.Xml.XmlNodeType.Text;
        if (hasTextNode)
        { 
            yield return @<div><span>@("   ".Repeat(depth) + $"{name} = \"{node.InnerText}\"")</span></div>;
        }
        else
        {
            yield return @<div><strong><span>@("   ".Repeat(depth) + name)</span></strong></div>;
        }
        if (node.HasChildNodes && !hasTextNode)
        {
            foreach (var childNode in node.ChildNodes)
            {
                foreach (var fragment in renderParametersView((System.Xml.XmlNode)childNode, depth + 1))
                {
                    yield return fragment;
                }
            }
        }
    }
}
