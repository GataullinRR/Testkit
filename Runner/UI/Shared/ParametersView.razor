@using global::Shared.Types;

@if (_lines == null)
{
    <span>There are no parameters</span>
}
else
{
    <div>
        @if (IsFirstLevel)
        {
            <h4 class="d-block" @onclick="() => onParametersExpanderClickAsync()">@Name (click to collapse/expand)</h4>
        }
        else
        {
            <span class="d-block" @onclick="() => onParametersExpanderClickAsync()">@Name (click to collapse/expand)</span>
        }
        <div class="px-2 @_parametersContainerClass">
            @foreach (var fragment in _lines)
            {
                @fragment;
            }
        </div>
    </div>
}

@code {
        async Task onParametersExpanderClickAsync()
        {
            _parametersContainerClass = _parametersContainerClass == "d-none"
                ? ""
                : "d-none";
        }

        string _parametersContainerClass = "d-none";
        RenderFragment[] _lines;

        [Parameter]
        public string? Parameters { get; set; }

        [Parameter]
        public string Name { get; set; } = "Parameters";

        [Parameter]
        public bool IsFirstLevel { get; set; } = true;

    protected override void OnParametersSet()
    {
        _lines = null;
        if (Parameters != null)
        {
            var root = NodeParameter.Deserialize(Parameters);
            _lines = renderParametersView(root).ToArray();
        }

        base.OnParametersSet();
    }

    IEnumerable<RenderFragment> renderParametersView(ParameterBase parameter, int depth = 0)
    {
        var perfix = "       ".Repeat(depth);
        if (parameter is LeafParameter leaf)
        {
            var value = leaf.Value == null
                ? "null"
                : $"\"{leaf.Value}\"";
            var text = $"{perfix}{leaf.Name} = {value}";
            yield return @<div><span>@text</span></div>;
        }
        else if (parameter is NodeParameter node)
        {
            yield return @<div><strong><span>@($"{perfix}{node.Name}")</span></strong></div>;
            foreach (var child in node.Children)
            {
                foreach (var fragment in renderParametersView(child, depth + 1))
                {
                    yield return fragment;
                }
            }
        }
        else
        {
            yield return @<span>UNKNOWN PARAMETER TYPE</span>;
        }
    }
}
