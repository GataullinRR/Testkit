@inject JsonSerializerSettings JsonSettings;
@inject ICookieStorage Cookies;
@inject NavigationManager NavigationManager;
@inject IWebMessageHub Hub;
@inject IMessageService Messages;
@inject NavigationManager NavigationManager
@inject IAppInitializationAwaiter AppInitializer;
@inject IPresentationService PresentationService;
@inject IMessageService MessageService;
@inject ICookieStorage Cookies;

@if (_tests.Count == 0)
{
    <RootContainer>
        <LoadingIndicator />
    </RootContainer>
}
else
{
    <div class="col-12">
        @if (UseQuery)
        {
            <div class="row mx-1 mt-2">
                <div class="col">
                    <input @bind-value="_query" @bind-value:event="oninput" placeholder="Enter set of space separated keywords" style="width: 100%"/>
                </div>
                @if (shouldApplyQuery)
                {
                    <div class="col">
                        <LoadingIndicator />
                    </div>
                }
            </div>
            @if(_readyQuery.IsNotNullOrEmpty())
            {
                <div class="row ml-2 mt-3">
                    <h4>Results for "@_readyQuery"</h4>
                </div>
            }
        }
        <div class="table-responsive">
            <table class="table table-striped table-borderless">
                <thead>
                    <tr>
                        <th>Last outcome</th>
                        <th>State</th>
                        <th>
                            Test name
                        </th>
                        <th>
                            Description
                        </th>
                        <th>Last run</th>
                        <th>Next run</th>
                        <th>Author</th>
                        <th>Action</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var test in _tests)
                    {
                        <tr>
                            <td>
                                @if (test.LastResult != null)
                                {
                                    @($"{test.LastResult.Result} in {test.LastResult.Duration.TotalSeconds:F1}s")
                                }
                            </td>

                            <td>
                                @test.State.State
                            </td>

                            <td>
                                <TestReferenceButton TestName="@test.TestName" />
                            </td>

                            <td>
                                <InlineButton @onclick="() => goToTest(test.TestName)">@test.Target.DisplayName</InlineButton>
                            </td>

                            <td>
                                @(test.LastResult == null ? "" : test.LastResult.StartTime.ToLocalTime().ToString("hh:mm dd.MM.yyyy"))
                            </td>

                            <td>
                                @switch (test.RunPlan.RunPlan)
                                {
                                    case RunnerService.API.Models.RunPlan.Manual:
                                        <span>Manual</span>
                                        break;
                                    case RunnerService.API.Models.RunPlan.Periodic:
                                        <span>
                                            @(test.RunPlan.To<RunnerService.API.Models.PeriodicRunPlan>().NextRun.ToLocalTime().ToString("hh:mm dd.MM.yyyy"))
                                        </span>
                                        break;

                                    default:
                                        throw new NotSupportedException();
                                }
                            </td>

                            <td>
                                <NavLink href="@UI.Pages.Profile.BuildPath(test.Author.UserName)">@test.Author.UserName</NavLink>
                            </td>

                            <td>
                                @if (test.CreationState == TestsStorageService.API.TestCaseState.Saved)
                                {
                                    @switch (test.State.State)
                                    {
                                        case RunnerService.API.Models.State.JustCreated:
                                        case RunnerService.API.Models.State.Ready:
                                            <RunTestButton TestNameFilter="@test.TestName" />
                                            break;
                                        case RunnerService.API.Models.State.Running:
                                            <CancelTestButton TestId="@test.TestId"/>
                                            <span> | </span>
                                            <RunTestButton TestNameFilter="@test.TestName" />
                                            break;

                                        default:
                                            throw new NotSupportedException();
                                    }
                                }
                            </td>
                        </tr>

                        @if (ShowParameters)
                        {
                            <tr>
                                <td colspan="99">
                                    <ParametersView Name="Recorded parameters" Parameters="global::SharedT.Types.NodeParameter.TryDeserialize(test.Target.Parameters)" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="row px-3">
            <div class="col ml-auto">Shown @shownCount of @_totalCount tests</div>
            @if (_totalCount - shownCount > 0)
            {
                for (int i = 0; i < ADD_MORE_BUTTONS_COUNT; i++)
                {
                    var addCount = getCount(i);
                    <div class="col-1 text-center">
                        <InlineButton @onclick="() => onShowMoreAsync(addCount)">Add @addCount</InlineButton>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    const int ADD_MORE_BUTTONS_COUNT = 3;
    const int NUM_OF_TESTS = 10;

    [Parameter]
    public bool UseQuery { get; set; }

    string _query = "";
    string _readyQuery = "";
    bool shouldApplyQuery => _query != _readyQuery;

    [Parameter]
    public string? TestNameFilter { get; set; }

    [Parameter]
    public EventCallback<IList<TestInfo>> OnTestsUpdatedAsync { get; set; }

    [Parameter]
    public bool ShowParameters { get; set; }

    int shownCount { get; set; }

    int _totalCount;
    readonly List<TestInfo> _tests = new List<TestInfo>();

    bool _setting = false; // no inf loops!
    protected override async Task OnParametersSetAsync()
    {
        if (!_setting)
        {
            _setting = true;

            await rerenderAsync();
        }

        _setting = false;
    }

    int getCount(int buttonIndex)
    {
        var x = Math.Log(_totalCount - shownCount);
        var xk = x / ADD_MORE_BUTTONS_COUNT;

        return Math.Exp((buttonIndex + 1) * xk).Round();
    }

    async Task addTestsAsync(int from, int to)
    {
        var response = UseQuery
            ? await PresentationService.ListTestsAsync(ListTestsRequest.ByQuery(_query, new IntInterval(from, to), false))
            : await PresentationService.ListTestsAsync(ListTestsRequest.ByNameFilter(TestNameFilter, new IntInterval(from, to), false));

        _totalCount = response.TotalCount;
        _tests.Clear();
        _tests.AddRange(response.Tests);

        await OnTestsUpdatedAsync.InvokeAsync(_tests);
    }

    async Task onShowMoreAsync(int count)
    {
        await addTestsAsync(_tests.Count, _tests.Count + count);

        StateHasChanged();
    }

    async Task goToTest(string testName)
    {
        NavigationManager.NavigateTo(Test.BuildPath(testName));
    }

    protected override async Task OnInitializedAsync()
    {
        await AppInitializer.AwaitInitializedAsync();

        Hub.TestAddedAsync += m => softRerenderAsync();
        Hub.TestCompletedAsync += m => softRerenderAsync();
        Hub.TestDeletedAsync += m => softRerenderAsync();
        Hub.TestBegunAsync += m => softRerenderAsync();
        Hub.TestCancelledAsync += async m =>
        {
            if (_tests.Any(t => t.TestId == m.TestId))
            {
                await softRerenderAsync();
            }
        };

        filterDaemon();
        rerenderDaemon();

        await base.OnInitializedAsync();
    }

    bool _rerenderingRequired = false;
    async void rerenderDaemon()
    {
        await ThreadingUtils.ContinueAtDedicatedThread();

        while (true)
        {
            await Task.Delay(3000);

            if (_rerenderingRequired)
            {
                _rerenderingRequired = false;
                await rerenderAsync();
            }
        }
    }
    async Task softRerenderAsync()
    {
        _rerenderingRequired = true;
    }

    async void filterDaemon()
    {
        await ThreadingUtils.ContinueAtDedicatedThread();

        while(true)
        {
            await Task.Delay(500);

            try
            {
                if (shouldApplyQuery)
                {
                    var rQ = _query;
                    await rerenderAsync();
                    _readyQuery = rQ;
                    StateHasChanged();
                }
            }
            catch
            {

            }
        }
    }

    async Task rerenderAsync()
    {
        await addTestsAsync(0, NUM_OF_TESTS);
        shownCount = _tests?.Count() ?? 0;

        StateHasChanged();
    }
}
