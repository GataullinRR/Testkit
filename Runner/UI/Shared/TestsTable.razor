@inject PresentationService.API2.PresentationService.PresentationServiceClient PresentationService;
@inject IMessageService MessageService;

@if (Tests == null)
{
    <RootContainer>Loading...</RootContainer>
}
else
{
    <div class="col-12">
        <div class="table-responsive">
            <table class="table table-striped table-borderless">
                <thead>
                    <tr>
                        <th>Last result</th>
                        <th>State</th>
                        <th>Target</th>
                        <th>Description</th>
                        <th>Last run</th>
                        <th>Next run</th>
                        <th>Author</th>
                        <th>Action</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var test in Tests)
                    {
                    <tr>
                        <td>
                            @if (test.LastResult != null)
                            {
                                @($"{test.LastResult.Result} in {test.LastResult.Duration.TotalSeconds:F0}s")
                            }
                        </td>

                        <td>
                            @test.State.State
                        </td>

                        <td>
                            <NavLink href="@TestTarget.BuildPath(test.TestId)">@test.TestId</NavLink>
                        </td>

                        <td>@test.Target.DisplayName</td>

                        <td>@(test.LastResult == null ? "" : test.LastResult.StartTime.ToString())</td>

                        <td>
                            @switch (test.RunPlan.RunPlan)
                            {
                                case RunPlan.Manual:
                                    <span>Manual</span>
                                    break;
                                case RunPlan.Periodic:
                                    <span>
                                        @(test.RunPlan.To<PeriodicRunPlan>().NextRun.ToString())
                                    </span>
                                    break;

                                default:
                                    throw new NotSupportedException();
                            }
                        </td>

                        <td>
                            <NavLink href="@UI.Pages.Profile.BuildPath(test.Author.UserName)">@test.Author.UserName</NavLink>
                        </td>

                        <td>
                            @switch (test.State.State)
                            {
                                case State.JustCreated:
                                case State.Ready:
                                    <InlineButton class="action-primary" @onclick="() => runAsync(test.TestId)">Run</InlineButton>
                                    break;
                                case State.AwaitingStart:
                                case State.Running:
                                    <InlineButton class="action-danger">Cancel</InlineButton>
                                    break;

                                default:
                                    throw new NotSupportedException();
                            }
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public IEnumerable<TestInfo> Tests { get; set; }

    async Task runAsync(string testId)
    {
        var response = await PresentationService.RunTestAsync(new PresentationService.API2.RunTestRequest() { TestId = testId });

        MessageService.AddMessage(response.Status.Code.ToString());
    }
}
