@inject JsonSerializerSettings JsonSettings;
@inject ICookieStorage Cookies;
@inject NavigationManager NavigationManager;
@inject IWebMessageHub Hub;
@inject IMessageService Messages;
@inject NavigationManager NavigationManager
@inject IAppInitializationAwaiter AppInitializer;
@inject IPresentationService PresentationService;
@inject IMessageService MessageService;
@inject ICookieStorage Cookies;

<TableBase Columns="_columns" 
           Rows="_rows" 
           TotalCount="_totalCount"  
           RowsPerItem="rowsPerEntry" 
           InitialCount="15"
           UseQuery="UseQuery" 
           OnAddRequestedAsync="onShowMoreAsync" />

@code {
    readonly TableBase.Column[] _columns = new TableBase.Column[]
    {
        new TableBase.Column() { Name = "Last outcome" },
        new TableBase.Column() { Name = "State" },
        new TableBase.Column() { Name = "Test name" },
        new TableBase.Column() { Name = "Description" },
        new TableBase.Column() { Name = "Last run" },
        new TableBase.Column() { Name = "Next run" },
        new TableBase.Column() { Name = "Author" },
        new TableBase.Column() { Name = "Action" },
    };
    List<TableBase.Row> _rows = new List<TableBase.Row>();

    [Parameter]
    public bool UseQuery { get; set; }

    [Parameter]
    public IEnumerable<IFilterOrder> Filters { get; set; }

    [Parameter]
    public bool ShowParameters { get; set; }

    int rowsPerEntry => ShowParameters ? 2 : 1;
    int entriesCount => _rows.Count / rowsPerEntry;

    int _totalCount;

    protected override async Task OnInitializedAsync()
    {
        await AppInitializer.AwaitInitializedAsync();

        Hub.TestAddedAsync += m => softRerenderAsync();
        Hub.TestCompletedAsync += m => softRerenderAsync();
        Hub.TestDeletedAsync += m => softRerenderAsync();
        Hub.TestBegunAsync += m => softRerenderAsync();
        Hub.TestCancelledAsync += m => softRerenderAsync();

        rerenderDaemon();

        await base.OnInitializedAsync();
    }

    string? _oldQuery = null;
    async Task showAsync(int from, int to, string? query)
    {
        query = query ?? _oldQuery;
        _oldQuery = query;

        var response = query != null
        ? await PresentationService.ListTestsAsync(ListTestsRequest.ByQuery(query, new IntInterval(from, to), false))
        : await PresentationService.ListTestsAsync(new ListTestsRequest(Filters.ToArray(), new IntInterval(from, to), false));

        _rows = new List<TableBase.Row>();
        _totalCount = response.TotalCount;
        foreach (var test in response.Tests)
        {
            _rows.Add(new TableBase.Row()
            {
                Cells = new RenderFragment[]
                {
                    @<span>
                        @if (test.LastResult != null)
                        {
                            @($"{test.LastResult.Result} in {test.LastResult.Duration.TotalSeconds:F1}s")
                        }
                    </span>,

                    @<span>@test.State.State</span>,

                    @<TestReferenceButton TestName="@test.TestName" />,

                    @<TestReferenceButton TestId="@test.TestId">@test.Target.DisplayName</TestReferenceButton>,

                    @<span>@(test.LastResult == null ? "" : test.LastResult.StartTime.ToLocalTime().ToString("hh:mm dd.MM.yyyy"))</span>,

                    @<span>@switch (test.RunPlan.RunPlan)
                            {
                                case RunnerService.API.Models.RunPlan.Manual:
                                    <span>Manual</span>
                                    break;
                                case RunnerService.API.Models.RunPlan.Periodic:
                                    <span>
                                        @(test.RunPlan.To<RunnerService.API.Models.PeriodicRunPlan>().NextRun.ToLocalTime().ToString("hh:mm dd.MM.yyyy"))
                                    </span>
                                    break;

                                default:
                                    throw new NotSupportedException();
                            }
                    </span>,

                    @<NavLink href="@UI.Pages.Profile.BuildPath(test.Author.UserName)">@test.Author.UserName</NavLink>,

                    @<span>@if (test.CreationState == TestsStorageService.API.TestCaseState.Saved)
                            {
                                var filters = new ByTestIdsFilter(test.TestId).ToSequence().ToArray();
                                @switch (test.State.State)
                                {
                                    case RunnerService.API.Models.State.JustCreated:
                                    case RunnerService.API.Models.State.Ready:
                                        <RunTestButton Filters="@filters" />
                                        break;
                                    case RunnerService.API.Models.State.Running:
                                        <CancelTestButton Filters="@filters" />
                                        <PreSpan> | </PreSpan>
                                        <RunTestButton Filters="@filters" />
                                        break;

                                    default:
                                        throw new NotSupportedException();
                                }
                                <PreSpan> | </PreSpan>
                                <DeleteTestButton Filters="@filters" />
                            }
                     </span>
                }
            });

            if (ShowParameters)
            {
                _rows.Add(new TableBase.Row()
                {
                    IsFullRowWide = true,
                    Cells = new RenderFragment[]
                    {
                        @<ParametersView Name="Recorded parameters" Parameters="@NodeParameter.TryDeserialize(test.Target.Parameters)" />
                    }
                });
            }
        }
        StateHasChanged();
    }

    int _count = 0;
    async Task onShowMoreAsync(string? query, int count)
    {
        _count += count;
        await showAsync(0, _count, query);
    }

    bool _rerenderingRequired = false;
    async Task softRerenderAsync()
    {
        _rerenderingRequired = true;
    }
    async void rerenderDaemon()
    {
        await ThreadingUtils.ContinueAtDedicatedThread();

        while (true)
        {
            await Task.Delay(3000);

            if (_rerenderingRequired)
            {
                _rerenderingRequired = false;
                await rerenderAsync();
            }
        }
    }

    async Task rerenderAsync()
    {
        await showAsync(0, _count, null);
    }
}
