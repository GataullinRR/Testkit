@inject JsonSerializerSettings JsonSettings;
@inject ICookieStorage Cookies;
@inject NavigationManager NavigationManager;
@inject IWebMessageHub Hub;
@inject IMessageService Messages;
@inject NavigationManager NavigationManager
@inject IAppInitializationAwaiter AppInitializer;
@inject PresentationService.API2.PresentationService.PresentationServiceClient PresentationService;
@inject IMessageService MessageService;
@inject ICookieStorage Cookies;

@if (_tests.Count == 0)
{
    <RootContainer>Loading...</RootContainer>
}
else
{
    <div class="col-12">
        <div class="table-responsive">
            <table class="table table-striped table-borderless">
                <thead>
                    <tr>
                        <th>Last outcome</th>
                        <th>State</th>
                        <th>Test name</th>
                        <th>Description</th>
                        <th>Last run</th>
                        <th>Next run</th>
                        <th>Author</th>
                        <th>Action</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var test in _tests)
                    {
                        <tr>
                            <td>
                                @if (test.LastResult != null)
                                {
                                    @($"{test.LastResult.Result} in {test.LastResult.Duration.TotalSeconds:F0}s")
                                }
                            </td>

                            <td>
                                @if (test.CreationState == TestsStorageService.API.TestCaseState.NotRecorded)
                                {
                                    <span>NotRecorded</span>
                                }
                                else
                                {
                                    @test.State.State
                                }
                            </td>

                            <td>
                                <TestReferenceButton TestName="@test.TestName" />
                            </td>

                            <td>
                                <InlineButton @onclick="() => goToTest(test.TestName)">@test.Target.DisplayName</InlineButton>
                            </td>

                            <td>@(test.LastResult == null ? "" : test.LastResult.StartTime.ToString("hh:mm dd.MM.yyyy"))</td>

                            <td>
                                @switch (test.RunPlan.RunPlan)
                                {
                                    case RunPlan.Manual:
                                        <span>Manual</span>
                                        break;
                                    case RunPlan.Periodic:
                                        <span>
                                            @(test.RunPlan.To<PeriodicRunPlan>().NextRun.ToString())
                                        </span>
                                        break;

                                    default:
                                        throw new NotSupportedException();
                                }
                            </td>

                            <td>
                                <NavLink href="@UI.Pages.Profile.BuildPath(test.Author.UserName)">@test.Author.UserName</NavLink>
                            </td>

                            <td>
                                @if (test.CreationState == TestsStorageService.API.TestCaseState.Saved)
                                {
                                    @switch (test.State.State)
                                    {
                                        case State.JustCreated:
                                        case State.Ready:
                                            <RunTestButton TestNameFilter="@test.TestName" />
                                            break;
                                        case State.AwaitingStart:
                                        case State.Running:
                                            @*<InlineButton class="action-danger">Cancel</InlineButton>*@
                                            <span>Running...</span>
                                            break;

                                        default:
                                            throw new NotSupportedException();
                                    }
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="row px-3">
            <div class="col ml-auto">Shown @shownCount of @_totalCount tests</div>
            @if (_totalCount - shownCount > 0)
            {
                for (int i = 0; i < ADD_MORE_BUTTONS_COUNT; i++)
                {
                    var addCount = getCount(i);
                    <div class="col-1 text-center">
                        <InlineButton @onclick="() => onShowMoreAsync(addCount)">Add @addCount</InlineButton>
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    const int ADD_MORE_BUTTONS_COUNT = 3;
    const int NUM_OF_TESTS = 10;

    [Parameter]
    public string? TestNameFilter { get; set; }

    [Parameter]
    public EventCallback<IList<TestInfo>> OnTestsUpdatedAsync { get; set; }

    int shownCount { get; set; }

    int _totalCount;
    readonly List<TestInfo> _tests = new List<TestInfo>();

    bool _setting = false; // no inf loops!
    protected override async Task OnParametersSetAsync()
    {
        if (!_setting)
        {
            _setting = true;

            await rerenderAsync();
        }

        _setting = false;
    }

    int getCount(int buttonIndex)
    {
        var x = Math.Log(_totalCount - shownCount);
        var xk = x / ADD_MORE_BUTTONS_COUNT;

        return Math.Exp((buttonIndex + 1) * xk).Round();
    }

    async Task addTestsAsync(int from, int to)
    {
        var gResponse = await PresentationService.ListTestsAsync(new ListTestsRequest(TestNameFilter, false, new IntInterval(from, to)));
        ListTestsResponse response = gResponse;

        _totalCount = response.TotalCount;
        _tests.AddRange(response.Tests);

        await OnTestsUpdatedAsync.InvokeAsync(_tests);
    }

    async Task onShowMoreAsync(int count)
    {
        await addTestsAsync(_tests.Count, _tests.Count + count);

        StateHasChanged();
    }

    async Task goToTest(string testName)
    {
        NavigationManager.NavigateTo(Test.BuildPath(testName));
    }

    protected override Task OnInitializedAsync()
    {
        Hub.TestAddedAsync += m => rerenderAsync();
        Hub.TestCompletedAsync += m => rerenderAsync();
        Hub.TestDeletedAsync += m => rerenderAsync();
        Hub.TestBegunAsync += m => rerenderAsync();

        return base.OnInitializedAsync();
    }

    async Task rerenderAsync()
    {
        await AppInitializer.AwaitInitializedAsync();

        _tests.Clear();
        await addTestsAsync(0, NUM_OF_TESTS);

        shownCount = _tests?.Count() ?? 0;

        StateHasChanged();
    }
}
