@inject IPresentationService PresentationService;
@inject IMessageService MessageService;
@inject IWebMessageHub Hub;

<TableBase Columns="_columns" Rows="_rows" TotalCount="_totalCount" RowsPerItem="2" InitialCount="6" UseQuery="true" OnAddRequestedAsync="addAsync"  />

@code {
    List<TableBase.Column> _columns = new List<TableBase.Column>();
    List<TableBase.Row> _rows = new List<TableBase.Row>();
    int _totalCount = 0;

    class TestSaveModel
    {
        [Required]
        public string TestName { get; set; }

        [Required]
        public string TestDescription { get; set; }
    }

    protected override Task OnInitializedAsync()
    {
        Hub.TestDeletedAsync += m => softRerenderAsync();
        Hub.TestRecordedAsync += m => softRerenderAsync();
        Hub.TestAddedAsync += m => softRerenderAsync();

        rerenderDaemon();

        return base.OnInitializedAsync();
    }

    string _lastQuery = "";
    async Task addAsync(string? query, int count)
    {
        query = query ?? _lastQuery;
        _lastQuery = query;

        var newCount = _rows.Count / 2 + count;
        _rows = new List<TableBase.Row>();
        _columns = new List<TableBase.Column>();

        ListTestsResponse response = await PresentationService.ListTestsAsync(ListTestsRequest.ByQuery(query, new IntInterval(0, newCount), true));
        _totalCount = response.TotalCount;
        _rows.Clear();
        _columns.Clear();
        _columns.Add(new TableBase.Column() { Name = "Test Id" });
        _columns.Add(new TableBase.Column() { Name = "Date" });
        var newCols = response.Tests
            .SelectMany(t => t.Target.KeyParameters.Split(Environment.NewLine).Where(p => p.Split("###").Length == 2).Select(p => p.Split("###")[0]))
            .Distinct()
            .Select(pk => new TableBase.Column() { Name = pk })
            .ToArray();
        _columns.AddRange(newCols);
        _columns.Add(new TableBase.Column() { Name = "" });
        foreach (var test in response.Tests)
        {
            var saveModel = new TestSaveModel()
            {
                TestName = test.TestName,
                TestDescription = test.Target.DisplayName
            };
            var rowIndex = _rows.Count;

            var cells = new List<RenderFragment>();
            cells.Add(@<span>@test.TestId</span>);
            cells.Add(@<span>@test.Target.CreateDate.ToLocalTime().ToString("hh:mm dd.MM.yyyy")</span>);
            for (int i = 0; i < newCols.Length; i++)
            {
                cells.Add(@<span></span>);
            }
            foreach (var p in test.Target.KeyParameters.Split(Environment.NewLine).Where(p => p.Split("###").Length == 2))
            {
                var k = p.Split("###")[0];
                var v = p.Split("###")[1];
                var col = _columns.FindIndex(c => c.Name == k);
                cells[col] = @<span>@v</span>;
            }
            cells.Add(@<FormTemplate class="ml-auto" IsInline="true" Model="saveModel">
                        <FormTextInput Name="Test name" @bind-Value="saveModel.TestName" />
                        <FormTextInput Name="Test description" @bind-Value="saveModel.TestDescription" />

                        <FormValidator/>

                        <FormButton Name="Save" IsSubmit="true" OnClick="async () => await saveTestAsync(test.TestId, saveModel, _rows[rowIndex])"/>
                    </FormTemplate>);
            _rows.Add(new TableBase.Row()
            {
                ExpandLastRow = true,
                Cells = cells.ToArray()
            });

            _rows.Add(new TableBase.Row()
            {
                IsFullRowWide = true,
                Cells = new RenderFragment[]
                {
                    @<ParametersView Parameters="@NodeParameter.TryDeserialize(test.Target.Parameters)" />,
                }
            });
        }

        StateHasChanged();
    }

    async Task rerenderAsync()
    {
        if (_rows.Count < 12)
        {
            await addAsync(null, 6 - _rows.Count / 2);
        }
        else
        {
            await addAsync(null, 0);
        }
    }

    bool _rerenderingRequired = false;
    async void rerenderDaemon()
    {
        await ThreadingUtils.ContinueAtDedicatedThread();

        while (true)
        {
            await Task.Delay(2000);

            if (_rerenderingRequired)
            {
                _rerenderingRequired = false;
                await rerenderAsync();
            }
        }
    }
    async Task softRerenderAsync()
    {
        _rerenderingRequired = true;
    }

    async Task saveTestAsync(int testId, TestSaveModel saveModel, TableBase.Row row)
    {
        row.IsDisabled = true;
        StateHasChanged();

        await PresentationService.SaveRecordedTestAsync(new SaveRecordedTestRequest(testId, saveModel.TestName, saveModel.TestDescription));
    }
}
