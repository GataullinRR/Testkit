@inject IPresentationService PresentationService;
@inject IMessageService MessageService;
@inject IWebMessageHub Hub;

<h3>Unsaved tests</h3>

<TableBase Columns="_columns" Rows="_rows" TotalCount="_totalCount" />

@code {
        [Parameter]
        public Dictionary<string, string> Parameters { get; set; }

        readonly List<TableBase.Column> _columns = new List<TableBase.Column>();

        readonly List<TableBase.Row> _rows = new List<TableBase.Row>();
        int _totalCount = 0;

    class TestSaveModel
    {
        [Required]
        public string TestName { get; set; }

        [Required]
        public string TestDescription { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        await rerenderAsync();

        await base.OnParametersSetAsync();
    }

    protected override Task OnInitializedAsync()
    {
        Hub.TestDeletedAsync += m => rerenderAsync();
        Hub.TestRecordedAsync += m => rerenderAsync();
        Hub.TestAddedAsync += m => rerenderAsync();

        return base.OnInitializedAsync();
    }

    async Task rerenderAsync()
    {
        ListTestsResponse response = await PresentationService.ListTestsAsync(ListTestsRequest.ByParameters(Parameters, new IntInterval(0, 1000), true));
        _totalCount = response.TotalCount;
        _rows.Clear();
        _columns.Clear();
        _columns.Add(new TableBase.Column() { Name = "Test Id" });
        _columns.Add(new TableBase.Column() { Name = "Date" });
        var newCols = response.Tests
            .SelectMany(t => t.Target.KeyParameters.Split(Environment.NewLine).Where(p => p.Split("###").Length == 2).Select(p => p.Split("###")[0]))
            .Distinct()
            .Select(pk => new TableBase.Column() { Name = pk })
            .ToArray();
        _columns.AddRange(newCols);
        foreach (var test in response.Tests)
        {
            var saveModel = new TestSaveModel()
            {
                TestName = test.TestName,
                TestDescription = test.Target.DisplayName
            };
            var rowIndex = _rows.Count;

            var cells = new List<RenderFragment>();
            cells.Add(@<span>@test.TestId</span>);
            cells.Add(@<span>@test.Target.CreateDate.ToString("hh:mm dd.MM.yyyy")</span>);
            for (int i = 0; i < newCols.Length; i++)
            {
                cells.Add(@<span></span>);
            }
            foreach (var p in test.Target.KeyParameters.Split(Environment.NewLine).Where(p => p.Split("###").Length == 2))
            {
                var k = p.Split("###")[0];
                var v = p.Split("###")[1];
                var col = _columns.FindIndex(c => c.Name == k);
                cells[col] = @<span>@v</span>;
            }
            cells.Add(@<FormTemplate class="ml-auto" IsInline="true" Model="saveModel">
                        <FormTextInput Name="Test name" @bind-Value="saveModel.TestName" />
                        <FormTextInput Name="Test description" @bind-Value="saveModel.TestDescription" />

                        <FormValidator/>

                        <FormButton Name="Save" IsSubmit="true" OnClick="async () => await saveTestAsync(test.TestId, saveModel, _rows[rowIndex])"/>
                        <FormButton Name="Discard" Type="@FormButton.ButtonType.Danger" OnClick="async () => await discardTestAsync(test.TestId, saveModel, _rows[rowIndex])"/>
                    </FormTemplate>);
            _rows.Add(new TableBase.Row()
            {
                ExpandLastRow = true,
                Cells = cells.ToArray()
            });

            _rows.Add(new TableBase.Row()
            {
                IsFullRowWide = true,
                Cells = new RenderFragment[]
                {
                    @<ParametersView Parameters="@test.Target.Parameters" />,
                }
            });
        }

        StateHasChanged();
    }

    async Task saveTestAsync(int testId, TestSaveModel saveModel, TableBase.Row row)
    {
        row.IsDisabled = true;
        StateHasChanged();

        await PresentationService.SaveRecordedTestAsync(new SaveRecordedTestRequest(testId, saveModel.TestName, saveModel.TestDescription));
    }

    async Task discardTestAsync(int testId, TestSaveModel saveModel, TableBase.Row row)
    {
        row.IsDisabled = true;
        StateHasChanged();

        await PresentationService.DeleteTestAsync(new DeleteTestRequest(testId));
    }
}
