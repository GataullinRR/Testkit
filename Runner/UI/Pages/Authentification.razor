@page "/auth";
@inject IUserService UserService;
@inject IMessageService MessageService;
@inject ICookieStorage Cookies;
@inject NavigationManager NavigationManager;
@inject IUserChangeNotifier UserChangeNotifier;

<RootContainer>
    @if (_signIn)
    {
        <SignInForm OnSubmit="loginAsync" OnRegistrationRequest="registrationRequested"></SignInForm>
    }
    else
    {
        <SignUpForm OnSubmit="registerAsync" OnSignInRequest="signInRequested"></SignUpForm>
    }
</RootContainer>

@code {
    public static string BuildPath()
    {
        return $"/auth";
    }

    bool _signIn = true;

    void registrationRequested()
    {
        _signIn = false;

        StateHasChanged();
    }

    void signInRequested()
    {
        _signIn = true;

        StateHasChanged();
    }

    async void registerAsync(SignUpForm.SignUpPresentationModel model)
    {
        var response = await UserService.SignUpAsync((SignUpRequest)model);
        MessageService.AddMessage("You've been succesfully registered, now you can sign in");
        signInRequested();
    }

    async void loginAsync(SignInForm.SignInPresentationModel model)
    {
        var response = await UserService.SignInAsync((SignInRequest)model);
        await Cookies.SetAsync(Constants.AUTH_TOKEN_COOKIE, response.Token);
        await UserChangeNotifier.FireAuthStateChangedAsync();

        MessageService.AddMessage($"Hi, {model.UserName}!");

        NavigationManager.NavigateTo(Runner.UI.Pages.Index.URI);
    }
}
