@inject PresentationService.API2.PresentationService.PresentationServiceClient PresentationService;
@inject IMessageService MessageService;
@inject Browser Browser;
@page "/cases/{TestNameFilter}"

<RootContainer>
    <h3>
        <TestReferenceButton TestName="@TestNameFilter" />
        <span> | </span>
        <RunTestButton TestNameFilter="@TestNameFilter" />
        <span> | </span>
        <DeleteTestButton TestNameFilter="@TestNameFilter" />
    </h3>
</RootContainer>

<RootContainer>
    <ParametersView Parameters="@_parameters"/>
</RootContainer>

<RootContainer>
    <h3>Tests</h3>
</RootContainer>

<TestsTable TestNameFilter="@TestNameFilter" OnTestsUpdatedAsync="onTestsLoadedAsync" />

<RootContainer>
    <h3>Run history</h3>
</RootContainer>

<RunHistoryTable TestNameFilter="@TestNameFilter" />

@code {
    public static string BuildPath(string testNameFilter)
    {
        return $"/cases/{testNameFilter}";
    }

    [Parameter]
    public string TestNameFilter { get; set; }

    string? _parameters = null;

    async Task onTestsLoadedAsync(IList<TestInfo> tests)
    {
        _parameters = null;
        if (tests.Count == 1)
        {
            _parameters = tests.Single().Target.Parameters;
        }
    }
}
