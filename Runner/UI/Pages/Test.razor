@inject IPresentationService PresentationService;
@inject IMessageService MessageService;
@inject Browser Browser;
@page "/case/{TestId}"
@page "/cases/{TestNameFilter}"

<div class="col-12 mt-3">
    <h3 class="ml-3">
        @if (TestNameFilter != null)
        {
            <TestReferenceButton TestName="@TestNameFilter" />
            <PreSpan> | </PreSpan>
        }
        <RunTestButton Filters="@_filters" />
        <PreSpan> | </PreSpan>
        <CancelTestButton Filters="@_filters" />
        <PreSpan> | </PreSpan>
        <DeleteTestButton Filters="@_filters" />
    </h3>
</div>

<TestsTable Filters="@_filters" ShowParameters="true" />

<h3 class="ml-4 mt-5">Run history</h3>

<RunHistoryTable Filters="@_filters" />

@code {
    public static string BuildPathToSingle(int testId)
    {
        return $"/case/{testId}";
    }
    public static string BuildPath(string testNameFilter)
    {
        return $"/cases/{testNameFilter}";
    }

    [Parameter]
    public string? TestId { get; set; }

    [Parameter]
    public string? TestNameFilter { get; set; }

    protected override void OnInitialized()
    {
        if (TestId != null)
        {
            _filters = new[] { new ByTestIdsFilter(TestId.ParseToInt32Invariant()) };
        }
        else if (TestNameFilter != null)
        {
            _filters = new[] { new ByTestNamesFilter(TestNameFilter) };
        }
        else
        {

        }

        base.OnInitialized();
    }

    IEnumerable<IFilterOrder> _filters = new IFilterOrder[0];
}
