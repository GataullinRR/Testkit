@inject PresentationService.API2.PresentationService.PresentationServiceClient PresentationServiceCleint;
@inject ICookieStorage Cookies;
@inject IMessageService Messages;
@page "/add-case"

<RootContainer>
    <FormTemplate Model="_model" OnSubmit="onSubmit">
        <FormHeader Name="Test information"/>
        <FormTextInput Name="Id" @bind-Value="@_model.Id"/>
        <FormTextInput Name="Description" @bind-Value="_model.Description"/>

        <FormHeader Name="Lookup parameters"/>
        <FormTextInput Name="UserId" @bind-Value="_model.UserId"/>

        <FormValidator/>

        <FormSubmitButton Name="Add"/>
    </FormTemplate>
</RootContainer>

@code {
    public static string BuildPath()
    {
        return $"/add-case";
    }

    class LookupParameters
    {
        [Required]
        public string Id { get; set; }

        [Required]
        public string Description { get; set; }

        [Required]
        public string UserId { get; set; }
    }

    readonly LookupParameters _model = new LookupParameters();

    async void onSubmit()
    {
        var request = new PresentationService.API2.BeginRecordingRequest();
        request.Token = await Cookies.GetValueAsync(Constants.AUTH_TOKEN_COOKIE) ?? "";
        request.DisplayName = _model.Description;
        request.TestId = _model.Id;
        request.Filter.Add("UserId", _model.UserId);

        var response = await PresentationServiceCleint.BeginRecordingAsync(request);

        Messages.AddMessage(response.Status.Code.ToString());
    }
}
