@inject PresentationService.API2.PresentationService.PresentationServiceClient PresentationService;
@inject ICookieStorage Cookies;
@inject IIdentityContext Context;
@inject IMessageService Messages;
@inject IWebMessageHub MessageHub;
@page "/add-case"

<RootContainer>
    <CascadingValue Name="IsDisabled" Value="!_isReady">
        <FormTemplate Model="_model" OnSubmit="onSubmit">
            <FormHeader Name="Lookup parameters" />
            <CascadingValue Name="IsDisabled" Value="_hasBegun">
                <FormTextInput Name="ServiceId" @bind-Value="_model.ServiceId" />
                <FormTextInput Name="UserId" @bind-Value="_model.UserId" />
            </CascadingValue>

            @if (!_hasBegun)
            {
                <FormValidator />
            }

            <FormButton IsSubmit="true" Name="@_hasBegun.Ternar("Stop", "Begin")" />
        </FormTemplate>
    </CascadingValue>
</RootContainer>

<UnsavedRecordedTestsView AuthorName="@Context.Identity.User.UserName" />

@code {
    public static string BuildPath()
    {
        return $"/add-case";
    }

    class LookupParameters
    {
        [Required]
        public string ServiceId { get; set; }

        [Required]
        public string UserId { get; set; }
    }

    bool _isReady = false;
    bool _hasBegun = false;
    readonly LookupParameters _model = new LookupParameters();

    async void onSubmit()
    {
        if (_hasBegun)
        {
            var request = new StopAddTestRequest();

            var response = await PresentationService.StopAddTestAsync(request);

            Messages.AddMessage(response.Status.Code.ToString());
        }
        else
        {
            var request = new BeginAddTestRequest(
                new Dictionary<string, string>()
                {
                    { "UserId", _model.UserId },
                    { "ServiceId", _model.ServiceId }
                });

            var response = await PresentationService.BeginAddTestAsync(request);

            Messages.AddMessage(response.Status.Code.ToString());
        }

        _isReady = false;
        StateHasChanged();

        await updateAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await updateAsync();

        await base.OnParametersSetAsync();
    }

    async Task updateAsync()
    {
        GetTestsAddStateResponse response = await PresentationService.GetTestsAddStateAsync(new GetTestsAddStateRequest());
        _hasBegun = response.HasBegan;
        _isReady = true;

        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    //async Task onRecordedAsync(TestAddedWebMessage webMessage)
    //{
    //    _isReady = false;
    //    StateHasChanged();
    //}
}
